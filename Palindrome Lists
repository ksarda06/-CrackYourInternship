
//  Definition for singly-linked list.
  struct ListNode {
      int val;
      ListNode *next;
      ListNode() : val(0), next(nullptr) {}
      ListNode(int x) : val(x), next(nullptr) {}
      ListNode(int x, ListNode *next) : val(x), next(next) {}
  };
 
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==nullptr || head->next==nullptr){
            return head;
        } 
        ListNode* newHead=reverseList(head->next);
        ListNode* front =head->next;
        front->next=head;
        head->next=nullptr;
        return newHead;
    }
    ListNode* findMiddle(ListNode* head){
        ListNode* slow=head;
        ListNode* fast=head;
        fast=fast->next->next;
        while(fast && fast->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    bool isPalindrome(ListNode* head) {
        if(head->next==nullptr){
            return true;
        }
        ListNode* mid=findMiddle(head);
        ListNode* rightNode=mid->next;
        rightNode=reverseList(rightNode);
        ListNode* mover1=head;
        ListNode* mover2=rightNode;
        while(mover1 && mover2){
            if(mover1->val!=mover2->val){
                return false;
            }
            mover1=mover1->next;
            mover2=mover2->next;
        }
        return true;

    }
};
