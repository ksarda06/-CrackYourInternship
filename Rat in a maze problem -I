class Solution {
  public:
    void solve(vector<vector<int>>& mat,vector<string>& ans,string s,int i,int j,vector<vector<bool>>& vis){
        if(i==mat.size()-1 && j==mat.size()-1){
            ans.push_back(s);
            return;
        }
        int row[4]={1,0,0,-1};
        int col[4]={0,-1,1,0};
        char d[4]={'D','L','R','U'};
        for(int k=0;k<4;k++){
            int newrow=i+row[k];
            int newcol=j+col[k];
            if(newrow>=0 && newrow<mat.size() && newcol>=0 && newcol<mat.size() && mat[newrow][newcol]==1 && vis[newrow][newcol]==0){
                vis[newrow][newcol]=true;
                solve(mat,ans,s+d[k],newrow,newcol,vis);
                vis[newrow][newcol]=false;
            }
        }
    }
    vector<string> findPath(vector<vector<int>> &mat) {
        // Your code goes here
        int n=mat.size();
        vector<string> ans;
        string s;
        vector<vector<bool>> vis(n,vector<bool>(n,false));
        if(mat[0][0]==1){
            vis[0][0]=true;
            solve(mat,ans,s,0,0,vis);
        }
        return ans;
    }
};
