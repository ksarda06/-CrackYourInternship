struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
 
class Solution {
public:
    void solve(TreeNode* root,int& ans){
        if(root==nullptr){
            return;
        }
        if(root->left){
            TreeNode* mover=root->left;
            while(mover->right){
                mover=mover->right;
            }
            ans=min(ans,abs(root->val-mover->val));
            solve(root->left,ans);
        }
        if(root->right){
            TreeNode* mover=root->right;
            while(mover->left){
                mover=mover->left;
            }
            ans=min(ans,abs(root->val-mover->val));
            solve(root->right,ans);
        }
    }
    int getMinimumDifference(TreeNode* root) {
        int ans=INT_MAX;
        solve(root,ans);
        return ans;
    }
};
