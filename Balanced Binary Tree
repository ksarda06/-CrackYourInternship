 sruct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  };

class Solution {
public:
    int solve(TreeNode* root){
        if(root==nullptr){
            return 0;
        }
        int left=solve(root->left);
        int right=solve(root->right);
        return 1+max(left,right);
    }
    bool isBalanced(TreeNode* root) {
        if(root==nullptr){
            return true;
        }
        int lh=solve(root->left);
        int rh=solve(root->right);
        if(abs(lh-rh)>1){
            return false;
        }
        return isBalanced(root->left) && isBalanced(root->right);
    }
};
