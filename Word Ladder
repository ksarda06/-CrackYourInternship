class Solution {
public:
    bool difby1(string a,string b){
        int dif=0;
        for(int i=0;i<a.size();i++){
            if(a[i]!=b[i]){
                dif++;
            }
        }
        if(dif==1){
            return true;
        }
        return false;
    }
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        bool flag=false;
        int n=wordList.size();
        vector<bool> vis(n,false);
        for(int i=0;i<n;i++){
            if(wordList[i]==endWord){
                flag=true;
                break;
            }
        }
        if(flag==false){
            return 0;
        }
        queue<pair<string,int>> q;
        q.push({beginWord,1});
        while(!q.empty()){
            auto t=q.front();
            string currWord=t.first;
            int count=t.second;
            q.pop();
            if(currWord==endWord){
                return count;
            }
            for(int i=0;i<n;i++){
                if(!vis[i] && difby1(currWord,wordList[i])){
                    q.push({wordList[i],count+1});
                    vis[i]=true;
                }
            }
        }
        return 0;
    }
};
